# Docker Compose v1.29.2 Compatible - CoreApp Multi-Service
version: '3.8'

services:
  # ====================================
  # DATABASE SERVICES
  # ====================================
  
  # PostgreSQL 17 - Primary Database
  postgres:
    image: postgres:17-alpine
    container_name: coreapp_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: coreapp_dev
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: dev123456
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      TZ: "America/Sao_Paulo"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - coreapp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d coreapp_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB

  # Redis 7 - Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: coreapp_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - coreapp_network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ====================================
  # APPLICATION SERVICES
  # ====================================

  # Backend API - Node.js + Express + Prisma
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: coreapp_backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: "postgresql://admin:dev123456@postgres:5432/coreapp_dev?schema=public"
      REDIS_URL: "redis://redis:6379"
      JWT_SECRET: "seu_jwt_secret_super_seguro_aqui"
      JWT_EXPIRES_IN: "24h"
      CACHE_TTL: 300
      CORS_ORIGIN: "http://localhost:3000"
      TZ: "America/Sao_Paulo"
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
    networks:
      - coreapp_network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: npm run dev

  # Frontend - React 18 + Mantine 7
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: coreapp_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: "http://localhost:3001/api"
      REACT_APP_WS_URL: "ws://localhost:3001"
      GENERATE_SOURCEMAP: "true"
      FAST_REFRESH: "true"
      TZ: "America/Sao_Paulo"
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    networks:
      - coreapp_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: npm run dev

  # ====================================
  # REVERSE PROXY
  # ====================================

  # Traefik v3 - Reverse Proxy Multi-Tenant
  traefik:
    image: traefik:v3.0
    container_name: coreapp_traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      - traefik_certs:/certs
    networks:
      - coreapp_network
      - default
    environment:
      TZ: "America/Sao_Paulo"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80

# ====================================
# NETWORKS
# ====================================
networks:
  coreapp_network:
    driver: bridge
    name: coreapp_network

# ====================================
# VOLUMES
# ====================================
volumes:
  postgres_data:
    name: coreapp_postgres_data
  redis_data:
    name: coreapp_redis_data
  backend_node_modules:
    name: coreapp_backend_node_modules
  frontend_node_modules:
    name: coreapp_frontend_node_modules
  traefik_certs:
    name: coreapp_traefik_certs