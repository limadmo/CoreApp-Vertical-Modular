version: '3.8'

# Sistema SAAS Multi-tenant Farmácia - Ambiente de Desenvolvimento Brasileiro
# Configuração completa com Traefik para roteamento multi-tenant
# .NET 9 + React Admin 4.16 + PostgreSQL 16 + Pagamentos Brasileiros

services:
  # Traefik - Reverse Proxy Multi-tenant Brasileiro
  traefik:
    image: traefik:v3.0
    container_name: core_traefik_dev
    restart: unless-stopped
    command:
      - "--api.insecure=true"  # Dashboard sem HTTPS (desenvolvimento apenas)
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
    ports:
      - "80:80"        # HTTP para tenants brasileiros
      - "8080:8080"    # Dashboard Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
    networks:
      - core-network
      - dokploy-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.dashboard.service=api@internal"

  # PostgreSQL 16 - Database Multi-tenant Brasileiro
  postgres:
    image: postgres:16-alpine
    container_name: core_postgres_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: farmacia_saas_dev
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev123456}
      PGDATA: /var/lib/postgresql/data/pgdata
      TZ: America/Sao_Paulo  # Timezone brasileiro
      LC_ALL: pt_BR.UTF-8    # Locale brasileiro
    ports:
      - "5432:5432"  # Única porta exposta para desenvolvimento
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - core-network
      - dokploy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d farmacia_saas_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Backend .NET 9 Multi-tenant
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - DOTNET_VERSION=9.0
        - ASPNETCORE_VERSION=9.0
    container_name: core_backend_dev
    restart: unless-stopped
    environment:
      # ASP.NET Core Configuration
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:5000
      TZ: America/Sao_Paulo
      
      # Database Connection
      ConnectionStrings__DefaultConnection: "Server=postgres;Port=5432;Database=farmacia_saas_dev;User Id=admin;Password=${DB_PASSWORD:-dev123456};Include Error Detail=true;"
      
      # Multi-tenant Configuration
      MultiTenant__DefaultTenant: demo
      MultiTenant__TenantDomain: localhost
      MultiTenant__TenantResolver: HeaderAndHost
      MultiTenant__DatabaseStrategy: GlobalFilters
      
      # JWT Security Brasileiro
      JWT__Secret: ${JWT_SECRET:-fake-jwt-secret-brasileiro-super-seguro-farmacia}
      JWT__ExpirationHours: 24
      JWT__RefreshExpirationDays: 7
      JWT__Issuer: CoreAPIBrasil
      JWT__Audience: CoreClientsBrasil
      
      # Módulos Comerciais Brasileiros
      ModulosComerciais__Starter__PrecoMensalBRL: 149.90
      ModulosComerciais__Professional__PrecoMensalBRL: 249.90
      ModulosComerciais__Enterprise__PrecoMensalBRL: 399.90
      
      # Pagamentos Brasileiros
      PagamentosBrasileiros__MercadoPago__AccessToken: ${MERCADOPAGO_TOKEN:-fake-mercadopago-token}
      PagamentosBrasileiros__MercadoPago__PublicKey: ${MERCADOPAGO_PUBLIC_KEY:-fake-mercadopago-public}
      PagamentosBrasileiros__PagSeguro__Email: ${PAGSEGURO_EMAIL:-fake@pagseguro.com.br}
      PagamentosBrasileiros__PagSeguro__Token: ${PAGSEGURO_TOKEN:-fake-pagseguro-token}
      PagamentosBrasileiros__PIX__ChavePIX: ${PIX_KEY:-fake-pix-key}
      
      # APIs Brasileiras
      ANVISA__BaseUrl: https://consultas.anvisa.gov.br/api
      ANVISA__ApiKey: ${ANVISA_API_KEY:-fake-anvisa-key}
      ANVISA__TimeoutSeconds: 30
      
      # CORS para desenvolvimento multi-tenant
      CORS__AllowedOrigins: >
        http://localhost,
        http://demo.localhost,
        http://core1.localhost,
        http://core2.localhost,
        http://admin.localhost,
        http://traefik.localhost,
        https://core-dev.diegolima.dev,
        https://api-dev.diegolima.dev
      
      # Logging Brasileiro
      Logging__LogLevel__Default: Information
      Logging__LogLevel__Farmacia: Debug
      Logging__Console__FormatterName: simple
    
    volumes:
      - ./backend/src:/app/src:ro        # Hot reload código fonte
      - ./backend/bin:/app/bin           # Build output
      - ./backend/obj:/app/obj           # Build cache
      - backend_logs:/app/logs           # Logs persistentes
    
    depends_on:
      postgres:
        condition: service_healthy
    
    networks:
      - core-network
      - dokploy-network
    
    # Traefik NÃO expõe porta - gerencia tudo via labels
    labels:
      - "traefik.enable=true"
      
      # API Principal - api.localhost (desenvolvimento)
      - "traefik.http.routers.api-main.rule=Host(`api.localhost`)"
      - "traefik.http.routers.api-main.service=backend"
      
      # API Produção - api-dev.diegolima.dev (Dokploy)
      - "traefik.http.routers.api-prod.rule=Host(`api-dev.diegolima.dev`)"
      - "traefik.http.routers.api-prod.service=backend"
      - "traefik.http.routers.api-prod.tls.certresolver=letsencrypt"
      
      # APIs Multi-tenant - {core}.localhost/api
      - "traefik.http.routers.api-tenant.rule=HostRegexp(`{tenant:[a-z0-9-]+}.localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api-tenant.service=backend"
      
      # Admin API - admin.localhost/api
      - "traefik.http.routers.api-admin.rule=Host(`admin.localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api-admin.service=backend"
      
      # Service Configuration
      - "traefik.http.services.backend.loadbalancer.server.port=5000"
      - "traefik.http.services.backend.loadbalancer.sticky.cookie=true"
      - "traefik.http.services.backend.loadbalancer.sticky.cookie.name=CORE_SESSION"
      - "traefik.docker.network=dokploy-network"
      
      # Health Check
      - "traefik.http.services.backend.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.backend.loadbalancer.healthcheck.interval=10s"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React Admin 4.16.x Brasileiro
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_VERSION=18
        - REACT_ADMIN_VERSION=4.16
        - TAILWIND_VERSION=3.4
        - REACT_APP_API_URL=https://api-dev.diegolima.dev/api
        - REACT_APP_ENV=development
    container_name: core_frontend_dev
    restart: unless-stopped
    environment:
      # React Environment
      NODE_ENV: development
      TZ: America/Sao_Paulo
      
      # API Configuration Multi-tenant Brasileiro
      REACT_APP_API_URL: ""  # Vazio para usar proxy automático baseado em hostname
      
      # Multi-tenant Configuration
      REACT_APP_TENANT_DOMAIN: localhost
      REACT_APP_DEFAULT_TENANT: demo
      
      # Configurações Brasileiras
      REACT_APP_CURRENCY: BRL
      REACT_APP_LOCALE: pt-BR
      REACT_APP_TIMEZONE: America/Sao_Paulo
      
      # Development
      REACT_APP_DEBUG: "true"
      REACT_APP_HOT_RELOAD: "true"
      
      # Theme Farmacêutico Brasileiro
      REACT_APP_PRIMARY_COLOR: "#2E7D32"    # Verde farmácia
      REACT_APP_SECONDARY_COLOR: "#1976D2"   # Azul confiança
      REACT_APP_SUCCESS_COLOR: "#4CAF50"     # Verde sucesso
      REACT_APP_WARNING_COLOR: "#FF9800"     # Laranja alerta
      REACT_APP_ERROR_COLOR: "#F44336"       # Vermelho erro
      
      # Pagamentos Brasileiros
      REACT_APP_MERCADOPAGO_PUBLIC_KEY: ${MERCADOPAGO_PUBLIC_KEY:-fake-mercadopago-public}
      REACT_APP_PAGSEGURO_APP_ID: ${PAGSEGURO_APP_ID:-fake-pagseguro-app}
      REACT_APP_ENABLE_PIX: "true"
      REACT_APP_ENABLE_BOLETO: "true"
      
      # Features Flags
      REACT_APP_ENABLE_ANALYTICS: "true"
      REACT_APP_ENABLE_NOTIFICATIONS: "true"
      REACT_APP_ENABLE_THEMES: "true"
    
    volumes:
      - ./frontend/src:/app/src:ro           # Hot reload código fonte
      - ./frontend/public:/app/public:ro     # Assets públicos
      - frontend_cache:/app/node_modules     # Cache node_modules
      - frontend_build:/app/build            # Build output
    
    depends_on:
      - backend
    
    networks:
      - core-network
      - dokploy-network
    
    # Traefik NÃO expõe porta - gerencia tudo via labels
    labels:
      - "traefik.enable=true"
      
      # App Principal - localhost (tenant demo padrão)
      - "traefik.http.routers.app-main.rule=Host(`localhost`)"
      - "traefik.http.routers.app-main.service=frontend"
      - "traefik.http.routers.app-main.middlewares=add-tenant-demo"
      
      # App Produção - core-dev.diegolima.dev (Dokploy)
      - "traefik.http.routers.app-prod.rule=Host(`core-dev.diegolima.dev`)"
      - "traefik.http.routers.app-prod.service=frontend"
      - "traefik.http.routers.app-prod.tls.certresolver=letsencrypt"
      
      # Apps Multi-tenant - {core}.localhost
      - "traefik.http.routers.app-tenant.rule=HostRegexp(`{tenant:[a-z0-9-]+}.localhost`)"
      - "traefik.http.routers.app-tenant.service=frontend"
      
      # Admin App - admin.localhost
      - "traefik.http.routers.app-admin.rule=Host(`admin.localhost`)"
      - "traefik.http.routers.app-admin.service=frontend"
      - "traefik.http.routers.app-admin.middlewares=add-tenant-admin"
      
      # Service Configuration
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.docker.network=dokploy-network"
      
      # Middlewares para adicionar headers de tenant brasileiro
      - "traefik.http.middlewares.add-tenant-demo.headers.customrequestheaders.X-Tenant-ID=demo"
      - "traefik.http.middlewares.add-tenant-admin.headers.customrequestheaders.X-Tenant-ID=admin"
      - "traefik.http.middlewares.add-tenant-demo.headers.customrequestheaders.X-Tenant-Country=BR"
      - "traefik.http.middlewares.add-tenant-admin.headers.customrequestheaders.X-Tenant-Country=BR"
      
      # SPA Middleware - redireciona tudo para index.html
      - "traefik.http.middlewares.spa.errors.status=404"
      - "traefik.http.middlewares.spa.errors.service=frontend"
      - "traefik.http.middlewares.spa.errors.query=/"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 8.2 - Cache + Filas Multi-tenant Brasileiro
  redis:
    image: redis:8.2-alpine
    container_name: core_redis_dev
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
      --databases 16
      --save 900 1
      --save 300 10
      --save 60 10000
      --rdbcompression yes
      --rdbchecksum yes
      --stop-writes-on-bgsave-error yes
      --lazyfree-lazy-eviction yes
      --lazyfree-lazy-expire yes
      --lazyfree-lazy-server-del yes
      --replica-lazy-flush yes
    # SEM PORTAS EXPOSTAS - Traefik gerencia tudo
    volumes:
      - redis_data:/data
    networks:
      - core-network
      - dokploy-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Mailhog - SMTP para desenvolvimento brasileiro
  mailhog:
    image: mailhog/mailhog:latest
    container_name: core_mailhog_dev
    restart: unless-stopped
    # SEM PORTAS EXPOSTAS - Traefik gerencia tudo
    networks:
      - core-network
      - dokploy-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mailhog.rule=Host(`mail.localhost`)"
      - "traefik.http.routers.mailhog.service=mailhog"
      - "traefik.http.services.mailhog.loadbalancer.server.port=8025"
      - "traefik.docker.network=dokploy-network"

  # Seq - Logging Estruturado para Multi-tenant (Opcional)
  seq:
    image: datalust/seq:latest
    container_name: core_seq_dev
    restart: unless-stopped
    environment:
      - ACCEPT_EULA=Y
      - SEQ_FIRSTRUN_ADMINUSERNAME=admin
      - SEQ_FIRSTRUN_ADMINPASSWORD=farmacia123
    # SEM PORTAS EXPOSTAS - Traefik gerencia tudo
    volumes:
      - seq_data:/data
    networks:
      - core-network
      - dokploy-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.seq.rule=Host(`logs.localhost`)"
      - "traefik.http.routers.seq.service=seq"
      - "traefik.http.services.seq.loadbalancer.server.port=80"
      - "traefik.docker.network=dokploy-network"

networks:
  core-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
  dokploy-network:
    external: true

volumes:
  # Database
  postgres_data:
    driver: local
  
  # Backend .NET
  backend_logs:
    driver: local
  
  # Frontend React
  frontend_cache:
    driver: local
  frontend_build:
    driver: local
  
  # Cache Redis
  redis_data:
    driver: local
    
  # Logging
  seq_data:
    driver: local

# Configurações para desenvolvimento otimizado brasileiro
x-development-config: &development-config
  restart: unless-stopped
  networks:
    - core-network
    - dokploy-network
  
# Health checks padrão
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s

# Configurações brasileiras compartilhadas
x-brazilian-config: &brazilian-config
  TZ: America/Sao_Paulo
  LC_ALL: pt_BR.UTF-8