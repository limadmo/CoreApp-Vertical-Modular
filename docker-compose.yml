# Docker Compose para CoreApp - Sistema SAAS Multi-tenant Brasileiro
# Configuração para desenvolvimento e produção com Traefik + SonarQube
version: '3.8'

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: coreapp_traefik
    restart: unless-stopped
    command:
      - --configFile=/etc/traefik/traefik.yml
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      - traefik_letsencrypt:/letsencrypt
      - traefik_logs:/var/log/traefik
    networks:
      - coreapp_network
      - dokploy-network
    environment:
      - TZ=America/Sao_Paulo
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=coreapp_network"
      
      # Dashboard
      - "traefik.http.routers.traefik-dashboard.rule=Host(`localhost`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.traefik-dashboard.entrypoints=traefik"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"

  # Database PostgreSQL 17 - CoreApp
  postgres:
    image: postgres:17-alpine
    container_name: coreapp_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: coreapp_saas_${ENV:-development}
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev123456}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=pt_BR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - coreapp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d coreapp_saas_${ENV:-development}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database PostgreSQL 17 - SonarQube (apenas desenvolvimento)
  sonar-db:
    image: postgres:17-alpine
    container_name: sonar_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: sonarqube
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: ${SONAR_DB_PASSWORD:-sonar123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - sonar_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - coreapp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar -d sonarqube"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - development

  # SonarQube Community Edition (apenas desenvolvimento)
  sonarqube:
    image: sonarqube:community
    container_name: coreapp_sonarqube
    restart: unless-stopped
    depends_on:
      sonar-db:
        condition: service_healthy
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonar-db:5432/sonarqube
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: ${SONAR_DB_PASSWORD:-sonar123}
      SONAR_WEB_PORT: 9000
      SONAR_WEB_CONTEXT: /
    volumes:
      - sonar_data:/opt/sonarqube/data
      - sonar_logs:/opt/sonarqube/logs
      - sonar_extensions:/opt/sonarqube/extensions
    ports:
      - "9000:9000"
    networks:
      - coreapp_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/api/system/status | grep -q UP || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s
    profiles:
      - development

  # DESENVOLVIMENTO: CoreApp backend roda localmente via 'dotnet run'
  # Serviço removido para desenvolvimento - usar apenas para produção

networks:
  coreapp_network:
    driver: bridge
    name: coreapp_network
  dokploy-network:
    external: true
    name: dokploy-network

volumes:
  postgres_data:
    name: coreapp_postgres_data
  sonar_postgres_data:
    name: coreapp_sonar_postgres_data
  sonar_data:
    name: coreapp_sonar_data
  sonar_logs:
    name: coreapp_sonar_logs
  sonar_extensions:
    name: coreapp_sonar_extensions
  app_logs:
    name: coreapp_app_logs
  traefik_letsencrypt:
    name: coreapp_traefik_letsencrypt
  traefik_logs:
    name: coreapp_traefik_logs