version: '3.8'

# Docker Compose para desenvolvimento CoreApp Multi-tenant Brasileiro
# Ambiente completo com Traefik + PostgreSQL + API + Frontend (quando implementado)

networks:
  coreapp-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  traefik_certificates:
    driver: local

services:
  # Reverse Proxy Multi-tenant com Traefik
  traefik:
    image: traefik:v3.0
    container_name: coreapp-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=dev@coreapp.com.br"
      - "--certificatesresolvers.letsencrypt.acme.storage=/certificates/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certificates:/certificates
    networks:
      - coreapp-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # PostgreSQL Multi-tenant Database
  postgres:
    image: postgres:16-alpine
    container_name: coreapp-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: coreapp_saas_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: coreapp_dev_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=pt_BR.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - coreapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d coreapp_saas_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para Cache e Sessions (multi-tenant)
  redis:
    image: redis:7-alpine
    container_name: coreapp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass coreapp_redis_2024
    volumes:
      - ./data/redis:/data
    networks:
      - coreapp-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # CoreApp API Backend (.NET 9)
  api:
    build:
      context: ./src
      dockerfile: Dockerfile
      args:
        BUILD_CONFIGURATION: Debug
    container_name: coreapp-api
    restart: unless-stopped
    environment:
      # ASP.NET Core
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: "http://+:8080"
      
      # Database
      ConnectionStrings__DefaultConnection: "Server=postgres;Port=5432;Database=coreapp_saas_dev;User Id=postgres;Password=coreapp_dev_2024;"
      
      # Multi-tenant brasileiro
      MultiTenant__DefaultTenant: "demo"
      MultiTenant__TenantDomain: "localhost"
      MultiTenant__TenantResolver: "HeaderAndHost"
      MultiTenant__DatabaseStrategy: "GlobalFilters"
      
      # JWT Security
      JWT__Secret: "coreapp-jwt-super-secret-key-desenvolvimento-brasileiro-2024"
      JWT__ExpirationHours: "24"
      JWT__RefreshExpirationDays: "7"
      JWT__Issuer: "CoreAPIBrasil"
      JWT__Audience: "CoreAppClientsBrasil"
      
      # Redis Cache
      Redis__ConnectionString: "redis:6379,password=coreapp_redis_2024"
      
      # Módulos comerciais brasileiros
      ModulosComerciais__Starter__PrecoMensalBRL: "149.90"
      ModulosComerciais__Professional__PrecoMensalBRL: "249.90"
      ModulosComerciais__Enterprise__PrecoMensalBRL: "399.90"
      
      # CORS para desenvolvimento
      CORS__AllowedOrigins: "http://localhost:3000,http://demo.localhost,http://*.localhost"
      
      # Logging
      Logging__LogLevel__Default: "Information"
      Logging__LogLevel__CoreApp: "Debug"
      Logging__LogLevel__Microsoft.EntityFrameworkCore: "Warning"
    # REMOVIDO: ports - Traefik gerencia automaticamente
    expose:
      - "8080"  # Apenas expõe internamente para o Traefik
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - coreapp-network
    labels:
      - "traefik.enable=true"
      # Serviço principal da API
      - "traefik.http.services.coreapp-api.loadbalancer.server.port=8080"
      # API principal (prioridade alta para match exato)
      - "traefik.http.routers.api.rule=Host(`api.localhost`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.routers.api.service=coreapp-api"
      - "traefik.http.routers.api.priority=200"
      # Multi-tenant routing - diferentes tenants por subdomínio (prioridade normal)
      - "traefik.http.routers.tenant-api.rule=HostRegexp(`.*\\.api\\.localhost`)"
      - "traefik.http.routers.tenant-api.entrypoints=web"
      - "traefik.http.routers.tenant-api.service=coreapp-api"
      - "traefik.http.routers.tenant-api.priority=100"
    healthcheck:
      test: ["CMD", "dotnet", "--info"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      # Hot reload para desenvolvimento
      - ./src:/app/src:ro
      - ./logs:/app/logs

  # pgAdmin para desenvolvimento de banco
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: coreapp-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@coreapp.com.br
      PGADMIN_DEFAULT_PASSWORD: coreapp_admin_2024
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - coreapp-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.localhost`)"
      - "traefik.http.routers.pgadmin.entrypoints=web"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"

  # Mailhog para teste de emails
  mailhog:
    image: mailhog/mailhog:latest
    container_name: coreapp-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - coreapp-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mailhog.rule=Host(`mail.localhost`)"
      - "traefik.http.routers.mailhog.entrypoints=web"
      - "traefik.http.services.mailhog.loadbalancer.server.port=8025"