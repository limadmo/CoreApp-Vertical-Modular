using Farmacia.Infrastructure.Data.Context;
using Farmacia.Infrastructure.MultiTenant;
using Farmacia.Application.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

namespace Farmacia.Infrastructure;

/// <summary>
/// Configura√ß√£o de inje√ß√£o de depend√™ncia para a camada de infraestrutura
/// Registra todos os servi√ßos relacionados a EF Core, Cache em mem√≥ria, Multi-tenant e APIs externas
/// </summary>
public static class DependencyInjection
{
    /// <summary>
    /// Adiciona todos os servi√ßos de infraestrutura ao container de DI
    /// </summary>
    /// <param name="services">Container de servi√ßos</param>
    /// <param name="configuration">Configura√ß√£o da aplica√ß√£o</param>
    /// <returns>Container configurado</returns>
    public static IServiceCollection AddInfrastructure(
        this IServiceCollection services, 
        IConfiguration configuration)
    {
        // Registrar servi√ßos multi-tenant
        AddMultiTenantServices(services);
        
        // Registrar Entity Framework Core
        AddEntityFramework(services, configuration);
        
        // Registrar servi√ßos de cache em mem√≥ria
        AddCacheServices(services);
        
        // Registrar APIs externas brasileiras
        AddBrazilianExternalServices(services, configuration);

        return services;
    }

    /// <summary>
    /// Registra servi√ßos relacionados a multi-tenancy
    /// </summary>
    /// <param name="services">Container de servi√ßos</param>
    private static void AddMultiTenantServices(IServiceCollection services)
    {
        // HttpContextAccessor necess√°rio para obter informa√ß√µes da requisi√ß√£o
        services.AddHttpContextAccessor();
        
        // Servi√ßo principal de multi-tenancy
        services.AddScoped<ITenantService, TenantService>();
    }

    /// <summary>
    /// Configura Entity Framework Core com PostgreSQL e otimiza√ß√µes multi-tenant
    /// </summary>
    /// <param name="services">Container de servi√ßos</param>
    /// <param name="configuration">Configura√ß√£o da aplica√ß√£o</param>
    private static void AddEntityFramework(IServiceCollection services, IConfiguration configuration)
    {
        var connectionString = configuration.GetConnectionString("DefaultConnection");
        
        services.AddDbContext<FarmaciaDbContext>(options =>
        {
            options.UseNpgsql(connectionString, npgsqlOptions =>
            {
                // Configura√ß√µes espec√≠ficas do PostgreSQL
                npgsqlOptions.EnableRetryOnFailure(
                    maxRetryCount: 3,
                    maxRetryDelay: TimeSpan.FromSeconds(30),
                    errorCodesToAdd: null);

                // Configurar timezone brasileiro
                npgsqlOptions.UseQuerySplittingBehavior(QuerySplittingBehavior.SplitQuery);
            });

            // Configura√ß√µes de desenvolvimento
            if (configuration.GetValue<string>("ASPNETCORE_ENVIRONMENT") == "Development")
            {
                options.EnableSensitiveDataLogging();
                options.EnableDetailedErrors();
                options.LogTo(Console.WriteLine, Microsoft.Extensions.Logging.LogLevel.Information);
            }

            // Configura√ß√µes de produ√ß√£o
            else
            {
                options.EnableServiceProviderCaching();
                options.EnableSensitiveDataLogging(false);
            }
        });

        // Health checks para PostgreSQL
        services.AddHealthChecks()
            .AddNpgSql(connectionString!, name: "postgresql", tags: new[] { "db", "postgresql" });
    }

    /// <summary>
    /// Registra servi√ßos de cache em mem√≥ria com IMemoryCache
    /// </summary>
    /// <param name="services">Container de servi√ßos</param>
    private static void AddCacheServices(IServiceCollection services)
    {
        // Registrar IMemoryCache nativo do .NET
        services.AddMemoryCache(options =>
        {
            // Configura√ß√µes de cache em mem√≥ria otimizadas
            options.SizeLimit = 1000; // M√°ximo 1000 entradas
            options.CompactionPercentage = 0.25; // Remove 25% quando atinge limite
            options.ExpirationScanFrequency = TimeSpan.FromMinutes(5); // Verifica expira√ß√£o a cada 5 minutos
        });
        
        // Registrar servi√ßo de configura√ß√£o din√¢mica
        services.AddScoped<IConfigurationService, ConfigurationService>();
        
        // Registrar servi√ßo de seed de configura√ß√µes
        services.AddScoped<IConfigurationSeedService, ConfigurationSeedService>();
    }

    /// <summary>
    /// Registra servi√ßos para APIs externas brasileiras (ANVISA, gateways de pagamento)
    /// </summary>
    /// <param name="services">Container de servi√ßos</param>
    /// <param name="configuration">Configura√ß√£o da aplica√ß√£o</param>
    private static void AddBrazilianExternalServices(IServiceCollection services, IConfiguration configuration)
    {
        // Configurar HttpClient para APIs externas
        services.AddHttpClient("ANVISA", client =>
        {
            var anvisaBaseUrl = configuration["ANVISA:BaseUrl"] ?? "https://consultas.anvisa.gov.br/api";
            var anvisaTimeout = configuration.GetValue<int>("ANVISA:TimeoutSeconds", 30);

            client.BaseAddress = new Uri(anvisaBaseUrl);
            client.Timeout = TimeSpan.FromSeconds(anvisaTimeout);
            
            // Headers padr√£o para API ANVISA
            client.DefaultRequestHeaders.Add("User-Agent", 
                "Farmacia-SAAS/3.0 (+https://farmacia.com.br)");
            client.DefaultRequestHeaders.Add("Accept", "application/json");
            
            // API Key se configurada
            var anvisaApiKey = configuration["ANVISA:ApiKey"];
            if (!string.IsNullOrEmpty(anvisaApiKey) && anvisaApiKey != "fake-anvisa-key")
            {
                client.DefaultRequestHeaders.Add("Authorization", $"Bearer {anvisaApiKey}");
            }
        });

        // HttpClient para Mercado Pago
        services.AddHttpClient("MercadoPago", client =>
        {
            client.BaseAddress = new Uri("https://api.mercadopago.com/");
            client.Timeout = TimeSpan.FromSeconds(30);
            
            var mpAccessToken = configuration["PagamentosBrasileiros:MercadoPago:AccessToken"];
            if (!string.IsNullOrEmpty(mpAccessToken) && mpAccessToken != "fake-mercadopago-token")
            {
                client.DefaultRequestHeaders.Add("Authorization", $"Bearer {mpAccessToken}");
            }
        });

        // HttpClient para PagSeguro
        services.AddHttpClient("PagSeguro", client =>
        {
            client.BaseAddress = new Uri("https://ws.pagseguro.uol.com.br/");
            client.Timeout = TimeSpan.FromSeconds(30);
        });

        // HttpClient gen√©rico para outras integra√ß√µes
        services.AddHttpClient("Default", client =>
        {
            client.Timeout = TimeSpan.FromSeconds(30);
            client.DefaultRequestHeaders.Add("User-Agent", 
                "Farmacia-SAAS/3.0 (+https://farmacia.com.br)");
        });

        // TODO: Registrar servi√ßos espec√≠ficos das APIs
        // services.AddScoped<IAnvisaService, AnvisaService>();
        // services.AddScoped<IMercadoPagoService, MercadoPagoService>();
        // services.AddScoped<IPagSeguroService, PagSeguroService>();
        // services.AddScoped<IPIXService, PIXService>();
    }

    /// <summary>
    /// Configura migrations e seeds autom√°ticos para desenvolvimento
    /// </summary>
    /// <param name="app">Aplica√ß√£o configurada</param>
    /// <returns>Aplica√ß√£o com migrations aplicadas</returns>
    public static async Task<WebApplication> ApplyMigrationsAsync(this WebApplication app)
    {
        using var scope = app.Services.CreateScope();
        
        try
        {
            var context = scope.ServiceProvider.GetRequiredService<FarmaciaDbContext>();
            
            // Aplicar migrations pendentes
            if ((await context.Database.GetPendingMigrationsAsync()).Any())
            {
                Console.WriteLine("üîÑ Aplicando migrations pendentes...");
                await context.Database.MigrateAsync();
                Console.WriteLine("‚úÖ Migrations aplicadas com sucesso");
            }
            
            // Verificar conectividade
            var canConnect = await context.Database.CanConnectAsync();
            if (canConnect)
            {
                Console.WriteLine("‚úÖ Conex√£o com PostgreSQL estabelecida");
                
                // Aplicar seeds de configura√ß√£o ap√≥s conectar
                await ApplyConfigurationSeedsAsync(scope.ServiceProvider);
            }
            else
            {
                Console.WriteLine("‚ùå Falha na conex√£o com PostgreSQL");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Erro ao aplicar migrations: {ex.Message}");
            
            // Em desenvolvimento, n√£o falhar por problema de banco
            if (app.Environment.IsDevelopment())
            {
                Console.WriteLine("‚ö†Ô∏è Continuando execu√ß√£o em modo desenvolvimento");
            }
            else
            {
                throw;
            }
        }

        return app;
    }

    /// <summary>
    /// Aplica seeds de configura√ß√µes ANVISA e padr√µes brasileiros
    /// </summary>
    /// <param name="serviceProvider">Provider de servi√ßos</param>
    private static async Task ApplyConfigurationSeedsAsync(IServiceProvider serviceProvider)
    {
        try
        {
            Console.WriteLine("üå± Aplicando seeds de configura√ß√µes farmac√™uticas...");
            
            var seedService = serviceProvider.GetRequiredService<IConfigurationSeedService>();
            
            // Seed das classifica√ß√µes ANVISA (A1-C5)
            await seedService.SeedClassificacoesAnvisaAsync();
            Console.WriteLine("‚úÖ Classifica√ß√µes ANVISA aplicadas");
            
            // Seed das configura√ß√µes padr√£o brasileiras
            await seedService.SeedStatusEstoqueAsync();
            Console.WriteLine("‚úÖ Status de estoque configurados");
            
            await seedService.SeedFormasPagamentoAsync();
            Console.WriteLine("‚úÖ Formas de pagamento brasileiras configuradas");
            
            await seedService.SeedStatusPagamentoAsync();
            Console.WriteLine("‚úÖ Status de pagamento configurados");
            
            await seedService.SeedStatusSincronizacaoAsync();
            Console.WriteLine("‚úÖ Status de sincroniza√ß√£o PDV configurados");
            
            Console.WriteLine("üå± Seeds de configura√ß√µes aplicados com sucesso!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ö†Ô∏è Erro ao aplicar seeds de configura√ß√µes: {ex.Message}");
            // N√£o falhar a aplica√ß√£o por problema de seed
        }
    }
}