/**
 * Servidor Principal CoreApp
 * Inicializa√ß√£o completa da API Multi-tenant
 */

import { app } from './app';

const PORT = process.env.PORT || 5000;

async function startServer() {
  try {
    console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                      üöÄ COREAPP API v1.0                     ‚ïë
‚ïë                  Sistema SAAS Multi-tenant                   ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë                                                              ‚ïë
‚ïë  üèóÔ∏è  Arquitetura: Multi-tenant + JWT + Cache Resiliente     ‚ïë
‚ïë  üîê  Autentica√ß√£o: JWT com Refresh Tokens                   ‚ïë
‚ïë  üë•  Permiss√µes: Role-based por Tenant                      ‚ïë
‚ïë  üìä  Cache: Fallback 2‚Üí30min + Vendas Safety                ‚ïë
‚ïë  üáßüá∑  Compliance: LGPD + Padr√µes Brasileiros                ‚ïë
‚ïë  üìñ  Docs: Swagger UI Completo                              ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);

    const server = app.listen(PORT, () => {
      console.log(`
üéØ Servidor iniciado com sucesso!

üåê Endpoints Principais:
   ‚Ä¢ API Base:         http://localhost:${PORT}/
   ‚Ä¢ Health Check:     http://localhost:${PORT}/health
   ‚Ä¢ Documenta√ß√£o:     http://localhost:${PORT}/api/docs
   ‚Ä¢ Schema JSON:      http://localhost:${PORT}/api/swagger.json

üîë Autentica√ß√£o:
   ‚Ä¢ Login User:       POST /api/auth/login
   ‚Ä¢ Login Admin:      POST /api/auth/super-admin/login  
   ‚Ä¢ Refresh Token:    POST /api/auth/refresh
   ‚Ä¢ Perfil:           GET /api/auth/profile

üìã Formato Credenciais:
   ‚Ä¢ Login:            XX00000X (Ex: AB12345C)
   ‚Ä¢ Senha:            X0000X   (Ex: A1234B)

üè¢ Multi-tenancy:
   ‚Ä¢ Header:           X-Tenant-ID: seu-tenant-id
   ‚Ä¢ Isolamento:       Completo por tenant

üõ°Ô∏è  Seguran√ßa:
   ‚Ä¢ Rate Limit:       100 req/min por usu√°rio
   ‚Ä¢ JWT Expiry:       15min (access) / 7dias (refresh)
   ‚Ä¢ Cache Fallback:   2‚Üí5‚Üí7‚Üí10‚Üí12‚Üí15‚Üí20‚Üí30min
   ‚Ä¢ Sales Safety:     Desabilitadas ap√≥s 30min sem cache

üí° Para come√ßar:
   1. Acesse http://localhost:${PORT}/api/docs
   2. Teste os endpoints na documenta√ß√£o interativa
   3. Use as credenciais demo ou crie via Super Admin

üîß Ambiente: ${process.env.NODE_ENV || 'development'}
      `);

      // Log adicional em desenvolvimento
      if (process.env.NODE_ENV === 'development') {
        console.log(`
üîç Desenvolvimento:
   ‚Ä¢ Logs SQL: Habilitados
   ‚Ä¢ CORS: localhost:3000, localhost:5173
   ‚Ä¢ Cache: Desabilitado (conforme CLAUDE.md)
   ‚Ä¢ Hot Reload: Use 'npm run dev'
        `);
      }
    });

    // Graceful shutdown
    process.on('SIGTERM', () => {
      console.log('\nüõë SIGTERM recebido. Encerrando servidor...');
      server.close(() => {
        console.log('‚úÖ Servidor encerrado com sucesso.');
        process.exit(0);
      });
    });

    process.on('SIGINT', () => {
      console.log('\nüõë SIGINT recebido. Encerrando servidor...');
      server.close(() => {
        console.log('‚úÖ Servidor encerrado com sucesso.');
        process.exit(0);
      });
    });

  } catch (error) {
    console.error('‚ùå Erro ao inicializar servidor:', error);
    process.exit(1);
  }
}

// Inicializar servidor
startServer();